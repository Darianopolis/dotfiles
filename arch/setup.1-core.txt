--------------------------------------------------------------------------------
--        Variables
--------------------------------------------------------------------------------

{drives.arch}                   E.g. /dev/nvme1n1   (identify via `$ lsblk`)
{drives.arch.uuid}                                  (identify via `$ blkid -s UUID -o value {drives.ach}`)
{username}                      E.g. darian
{hostname}                      E.g. arch
{keymap}                        E.g. uk
{timezone}                      E.g. Europe/London
{locales.all}                   E.g. en_US.UTF-8 UTF-8
                                     en_GB.UTF-8 UTF-8
{locales.primary}               E.g. en_GB.UTF-8
{swap.size}                     E.g. 64G

{wifi.ssid}                          WiFi Network SSID
{wifi.passwd}                        Wifi Network Password

{kernel.parameters}             This variable will be updated throughout the stage with kernel boot parameters
                                  parameters are space separated

--------------------------------------------------------------------------------
--        Initial installation environment setup
--------------------------------------------------------------------------------

$ loadkeys {keymap}
$ timedatectl

$ iwctl
  device list           - To find adapter {name}
  station {name} scan   - To find network {wifi.ssid}
  station {name} connect {wifi.ssid}

--------------------------------------------------------------------------------
--        Drive setup
--------------------------------------------------------------------------------

# fdisk {drives.arch}
  g             - New GPT partition table
  n             - New partition (for /boot)
  Enter *2
  +1G           - 1 GB partitio size
  t             - Change partition type
  1             - EFI
  n             - New partition (for /)
  Enter *3      - Take rest of disk
  w             - Write out changes

# mkfs.fat -F32 {drives.arch}p1
# mkfs.ext4 {drives.arch}p2

--------------------------------------------------------------------------------
--        Bootstrap
--------------------------------------------------------------------------------

# mount {drives.arch}p2 /mnt
# mount --mkdir {drives.arch}p1 /mnt/boot

# pacstrap -K /mnt base linux linux-firmware amd-ucode vim

# genfstab -U /mnt >> /mnt/etc/fstab
# arch-chroot /mnt

> /etc/pacman.conf
  ParallelDownloads = 16

  [multilib]
  Include = "/etc/pacman.d/mirrorlist

# pacman -Syu

# pacman -S
    base-devel                  - Core packages
    linux-headers               - Linux kernel & firmware
    networkmanager              - Networking
    grub efibootmgr [os-prober] - Bootmanager
    vi sudo git wget            - Utilities
    pipewire lib32-pipewire wireplumber pipewire-alsa pipewire-pulse pipewire-jack - Audio

--------------------------------------------------------------------------------
--        Networking
--------------------------------------------------------------------------------

# systemctl enable NetworkManager.service
# systemctl enable systemd-resolved.service

--------------------------------------------------------------------------------
--        Time
--------------------------------------------------------------------------------

# ln -fs /usr/share/zoneinfo/{timezone} /etc/localtime
# systemctl enable systemd-timesyncd.service
# hwclock --systohc

--------------------------------------------------------------------------------
--        Locale
--------------------------------------------------------------------------------

# echo "{locales.all}" > /etc/locale.gen
# locale-gen
# localectl set-locale LANG={locales.primary} LC_TIME=C

--------------------------------------------------------------------------------
--        Keymap
--------------------------------------------------------------------------------

# echo "KEYMAP={keymap}" > /etc/vconsole.conf
# localectl set-keymap --no-convert {keymap}

--------------------------------------------------------------------------------
--        journald
--------------------------------------------------------------------------------

> /etc/systemd/journald.conf.d/20-maxsize.conf
  [Journal]
  SystemMaxUse=100M

--------------------------------------------------------------------------------
--        Swap
--------------------------------------------------------------------------------

# mkswap -U clear --size {swap.size} --file /swapfile
> /etc/fstab
  /swapfile none swap defaults 0 0

--------------------------------------------------------------------------------
--        Disable Memory Overcommit (optional - see WARNING)
--------------------------------------------------------------------------------

-- Disable overcommit (optional)
---- 0 = overcommit up to arbitrary limit
---- 1 = always overcommit
---- 2 - never overcommit

-- WARNING: Disabling overcommit can result in processes crashing due to failed
            allocations under heavy memory usage (e.g. when launching games)
            It also completely prevents the usage of C++'s address-sanitizer
            which *relies* on overcommit

> /etc/sysctl.d/99-overcommit.conf
  vm.overcommit_memory=2

-- To change overcommit at runtime

$ cat /proc/sys/vm/overcommit_memory
$ echo {new_commit_mode} | sudo tee /proc/sys/vm/overcommit_memory

--------------------------------------------------------------------------------
--        Accounts
--------------------------------------------------------------------------------

# passwd

$ useradd -m -g users -G wheel -s /bin/bash {username}
$ passwd {username}

$ visudo
  %wheel ALL=(ALL:ALL): ALL

> /etc/security/faillock.conf
  unlock_time = 5
  nodelay

--------------------------------------------------------------------------------
--        Bootloader (systemd-boot)
--------------------------------------------------------------------------------

-- NOTE: When running in arch-chroot with systemd v256, run the following OUTSIDE the chroot first

# bootctl --esp-path=/mnt/boot install

-- NOTE: With systemd v257 (not yet released as of time of writing, append `--variables=yes` to the following command instead)

# bootctl install

-- NOTE: Don't use *tabs* in these configuration files, spaces only

> /boot/loader/loader.conf

  default      arch.conf
  timeout      4
  console-mode max
  editor       no

> /boot/loader/entries/arch.conf

  title   Arch Linux
  linux   /vmlinuz-linux
  initrd  /initramfs-linux.img
  options root=UUID={drives.arch.uuid} rw rootfstype=ext4 add_efi_memmap {kernel.parameters}

> /boot/loader/entries/arch-fallback.conf

  title   Arch Linux (fallback initramfs)
  linux   /vmlinuz-linux
  initrd  /initramfs-linux-fallback.img
  options root=UUID={drives.arch.uuid} rw rootfstype=ext4 add_efi_memmap {kernel.parameters}

# bootctl update

-- Can check entries with 

# bootctl list

--------------------------------------------------------------------------------
--        Disable USB Autosuspend
--------------------------------------------------------------------------------

! {kernel.parameters} += usbcore.autosuspend=-1

--------------------------------------------------------------------------------
--        SysRq key
--------------------------------------------------------------------------------

! {kernel.parameters} += sysrq_always_enabled=1
# echo "kernel.sysrq=1" > /etc/sysctl.d/99-sysrq.conf

--------------------------------------------------------------------------------
--        NVIDIA
--------------------------------------------------------------------------------

-- WARNING: use `nvidia-dkms` instead of `nvidia-open-dkms` on 10 series cards

  -- Official Arch Drivers

# pacman -S nvidia-open-dkms nvidia-utils lib32-nvidia-utils egl-wayland

-- Note: For the Beta AUR drivers substitute the following packages instead: (nvidia-open-beta-dkms nvidia-utils-beta lib32-nvidia-utils-beta)

-- TODO: None of these seem to be necessary anymore?
---- ! {kernel.parameters} += nvidia_drm.modeset=1
---- ! {kernel.parameters} += nvidia.NVreg_PreserveVideoMemoryAllocations=1
---- ! {kernel.parameters} += nvidia.NVreg_TemporaryFilePath=/tmp
---- ! {kernel.parameters} += nvidia.NVreg_UsePageAttributeTable=1

> /etc/mkinitcpio.conf
  MODULES += nvidia_modeset nvidia_uvm nvidia_drm
  HOOKS   -= kms

# systemctl enable nvidia-suspend.service
# systemctl enable nvidia-resume.service

-- TODO: Sort out video encode/decode mess
-- NOTE: For now you can skip this and go to the next section

-- VAAPI -> NVDEC video encode/decode translation layer
-- https://wiki.archlinux.org/title/Hardware_video_acceleration
--  +-> https://github.com/elFarto/nvidia-vaapi-driver/?tab=readme-ov-file#installation

# pacman -S libva-nvidia-driver
> /etc/environment
  MOZ_DISABLE_RDD_SANDBOX=1
  LIBVA_DRIVER_NAME=nvidia

--------------------------------------------------------------------------------
--      Update systemd-boot + initramfs
--------------------------------------------------------------------------------

# bootctl update          (confirm entries with `bootctl list`)
# mkinitcpio -P

--------------------------------------------------------------------------------
--      Reboot
--------------------------------------------------------------------------------

$ exit                      To exit out ot chroot
$ systemctl-reboot          To reboot system, make sure to boot from new install

--------------------------------------------------------------------------------
--      Reconnect to wireless network on reboot
--------------------------------------------------------------------------------

-- TODO: Replicate archinstall's "copy live media configuration"

$ nmcli device                                                  - List networks
$ nmcli device wifi connect {wifi.ssid} password {wifi.passwd}  - Connect to network
